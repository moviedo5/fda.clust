library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
traceback()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
utils::globalVariables(c(
"metric.lp", "func.mean", "func.trim.FM",
"kmeans.center.ini", "Ker.norm", "gridfdata",
"h.default", "rproc2fdata"
))
<!--
library(roxygen2)
# Limpia los archivos previos
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
# Genera la documentaci贸n y NAMESPACE de nuevo
devtools::document()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
# Limpia los archivos previos
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
# Genera la documentaci贸n y NAMESPACE de nuevo
devtools::document()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
# Declare global variables to avoid warnings about undefined variables
utils::globalVariables(c(
"metric.lp", "func.mean", "func.trim.FM",
"kmeans.center.ini", "Ker.norm", "gridfdata",
"h.default", "rproc2fdata"
))
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
# Limpia los archivos previos
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
tools::checkRd("man/rproc2mu.Rd")
tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
tools::checkRd("man/rproc2mu.Rd")
tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
tools::checkRd("man/rproc2mu.Rd")
tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
tools::checkRd("man/rproc2mu.Rd")
tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
library(devtools)
devtools::build()
devtools::check(manual = TRUE)  # problemas con miktex
devtools::install()
#' @export
rproc2clust <- function (n.1 = 51, n.2 = n.1, mu.1, mu.2, s.1 = 1, s.2 = 1,
par.list.1 = FALSE, par.list.2 = FALSE, ...) {
t <- mu.1$argvals
if (is.fdata(mu.1)) mu.1 <- mu.1$data
if (is.fdata(mu.2)) mu.2 <- mu.2$data
groups <- factor(rep(c(1, 2), c(n.1, n.2)))
color <- c("darkblue", "darkmagenta")
colors <- rep(c("blue", "magenta"), c(n.1, n.2))
# Simulaci贸n
if (isFALSE(par.list.1)) {
X <- rproc2fdata(n.1, t, mu = mu.1, sigma = s.1, ...)
} else {
X <- rproc2fdata(n.1, t, mu = mu.1, sigma = s.1, par.list = par.list.1, ...)
}
if (isFALSE(par.list.2)) {
X <- c(X, rproc2fdata(n.2, t, mu = mu.2, sigma = s.2, ...))
} else {
X <- c(X, rproc2fdata(n.2, t, mu = mu.2, sigma = s.2, par.list = par.list.2, ...))
}
# Medias funcionales
X.hat <- func.mean(X[groups == 1])
X.hat <- c(X.hat, func.mean(X[groups == 2]))
# Salidas
return (list("X" = X, "X.hat" = X.hat, "groups" = groups,
"color" = color, "colors" = colors))
}
fproces <- rproc2mu( 51, "sin", "cos", 1, 1)
res <- rproc2clust (10,50,fproces$mu.1,fproces$mu.2)
library(fda.clust)
fproces <- rproc2mu( 51, "sin", "cos", 1, 1)
res <- rproc2clust (10,50,fproces$mu.1,fproces$mu.2)
libraary(fda.usc)
library(fda.usc)
fproces <- rproc2mu( 51, "sin", "cos", 1, 1)
res <- rproc2clust (10,50,fproces$mu.1,fproces$mu.2)
plot(res$X, col=res$groups)
lines(res$X.hat, lwd=2, col=res$color)
res$color
res$X.hat
rproc2mu
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
tools::checkRd("man/rproc2mu.Rd")
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
tools::checkRd("man/rproc2mu.Rd")
pkgload::dev_help('cell_cycle')
load("C:/Users/Manuel Oviedo/github/fda.clust/data/growth_ldata.rda")
ls()
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
library(devtools)
devtools::build()
devtools::check(manual = TRUE)  # problemas con miktex
devtools::install()
#  setwd("C:/Users/Manuel Oviedo/github")
build_manual(pkg = "fda.clust", path = NULL)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
# Genera la documentaci贸n y NAMESPACE de nuevo
devtools::document()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
library(devtools)
devtools::build()
devtools::check(manual = TRUE)  # problemas con miktex
devtools::install()
#  setwd("C:/Users/Manuel Oviedo/github")
build_manual(pkg = "fda.clust", path = NULL)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
build_manual(pkg = "fda.clust", path = NULL)
getwd()
setwd("C:/Users/Manuel Oviedo/github")
build_manual(pkg = "fda.clust", path = NULL)
library(devtools)
setwd("C:/Users/Manuel Oviedo/github")
build_manual(pkg = "fda.clust", path = NULL)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
setwd("C:/Users/Manuel Oviedo/github/fda.clust")
setwd("C:/Users/Manuel Oviedo/github")
build_manual(pkg = "fda.clust", path = NULL)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
getwd()
#pkgbuild::compile_dll()
roxygenize()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
library(devtools)
devtools::build()
devtools::check(manual = TRUE)  # problemas con miktex
devtools::install()
library(pkgdown)
# usethis::use_pkgdown()
# Build website:
#pkgdown::build_site()
build_site(new_process = TRUE)
