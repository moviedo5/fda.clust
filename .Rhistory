c = c(-1, 1, 1),
s = c(0.1, 0.15, 0.05)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X$data
group <- res$groups
# Convertir los datos simulados en un dataframe adecuado para ggplot2
df <- data.frame(
t = rep(t, nrow(sim_data)),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
# Crear la gráfica de fondo con ggplot2
p <- ggplot(df, aes(x = t, y = value, group = interaction(group, rep(1:nrow(sim_data), each = length(t))))) +
geom_line(aes(color = as.factor(group)), size = 0.6, alpha = 0.8) +
scale_color_manual(values = c("#E63946", "#F4A261", "#2A9D8F")) + # Colores distintivos
theme_void() + # Eliminar ejes, fondo, etc.
theme(legend.position = "none") # Eliminar la leyenda
# Crear el sticker
sticker(
p,
package = "fda.clust",
p_size = 20, # Tamaño del texto principal
p_color = "white", # Color del texto
s_x = 1, s_y = 0.85, s_width = 1.3, s_height = 1.3, # Posición y tamaño de la gráfica de fondo
h_fill = "#264653", # Color de fondo de la pegatina
h_color = "#2A9D8F", # Color del borde de la pegatina
spotlight = TRUE, # Efecto de foco en el título
l_x = 1, l_y = 0.2, l_width = 3, l_height = 3, # Parámetros para el logotipo o texto inferior
url = "fda.usc", # Texto adicional en la parte inferior
u_size = 6, # Tamaño del texto URL
filename = "fda_clust_sticker.png" # Nombre del archivo de salida
)
# Limpia el entorno
rm(list = ls())
# Carga de librerías necesarias
library(fda.usc)
library(hexSticker)
library(ggplot2)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(0.1, 0.15, 0.05)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- t(res$X$data)
group <- res$groups
# Convertir los datos simulados en un dataframe adecuado para ggplot2
df <- data.frame(
t = rep(t, nrow(sim_data)),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
# Limpia el entorno
rm(list = ls())
# Carga de librerías necesarias
library(fda.usc)
library(hexSticker)
library(ggplot2)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(0.1, 0.15, 0.05)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X$data
group <- res$groups
# Convertir los datos simulados en un dataframe adecuado para ggplot2
df <- data.frame(
t = rep(t, nrow(sim_data)),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
# Crear la gráfica de fondo con ggplot2
p <- ggplot(df, aes(x = t, y = value, group = interaction(group, rep(1:nrow(sim_data), each = length(t))))) +
geom_line(aes(color = as.factor(group)), size = 0.6, alpha = 0.8) +
scale_color_manual(values = c("#E63946", "#F4A261", "#2A9D8F")) + # Colores distintivos
theme_void() + # Eliminar ejes, fondo, etc.
theme(legend.position = "none") # Eliminar la leyenda
# Crear el sticker
sticker(
p,
package = "fda.clust",
p_size = 20, # Tamaño del texto principal
p_color = "white", # Color del texto
s_x = 1, s_y = 0.85, s_width = 1.3, s_height = 1.3, # Posición y tamaño de la gráfica de fondo
h_fill = "#264653", # Color de fondo de la pegatina
h_color = "#2A9D8F", # Color del borde de la pegatina
spotlight = TRUE, # Efecto de foco en el título
l_x = 1, l_y = 0.2, l_width = 3, l_height = 3, # Parámetros para el logotipo o texto inferior
url = "fda.usc", # Texto adicional en la parte inferior
u_size = 6, # Tamaño del texto URL
filename = "fda_clust_sticker.png" # Nombre del archivo de salida
)
# Crear el sticker
aa=sticker(
p,
package = "fda.clust",
p_size = 20, # Tamaño del texto principal
p_color = "white", # Color del texto
s_x = 1, s_y = 0.85, s_width = 1.3, s_height = 1.3, # Posición y tamaño de la gráfica de fondo
h_fill = "#264653", # Color de fondo de la pegatina
h_color = "#2A9D8F", # Color del borde de la pegatina
spotlight = TRUE, # Efecto de foco en el título
l_x = 1, l_y = 0.2, l_width = 3, l_height = 3, # Parámetros para el logotipo o texto inferior
url = "fda.usc", # Texto adicional en la parte inferior
u_size = 6, # Tamaño del texto URL
filename = "fda_clust_sticker.png" # Nombre del archivo de salida
)
p
dim(sim_data)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(0.1, 0.15, 0.05)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
plot(sim_data)
plot(xx,col= res$groups)
xx=optim.basis(sim_data)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(0.2, 0.25, 0.15)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data)$fdata.est
plot(xx,col= res$groups)
xx=optim.basis(sim_data,19)$fdata.est
args(optim.basis)
xx=optim.basis(sim_data,numbasis=19)$fdata.est
xx=optim.basis(sim_data,numbasis=49)$fdata.est
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
ss="vexponential"
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(ss,ss,ss)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
t <- seq(0, 2 * pi, length.out = 101)
ss="vexponential"
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(ss,ss,ss)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
ss="brownian"
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(ss,ss,ss)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
ss="vexponential"
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(ss,ss,ss)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(0.2, 0.55, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos","cos_sin", "sin", ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
eneración de datos simulados con rprocKclust
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=49)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=29)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.basis(sim_data,numbasis=19)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data)$fdata.est
plot(xx,col= res$groups)
aa=optim.np(sim_data)
aa$h.opt
xx=optim.np(sim_data,h=0.2)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.2)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.2)$fdata.est
plot(xx,col= res$groups)
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.6)$fdata.est
plot(xx,col= res$groups)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.1)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(-1, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.1)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(2, 1, 1),
s = c(0.4, 0.2, 0.1)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.1)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(2, 1, 1),
s = c(0.4, 0.8, 0.3)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.1)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(2, 1, 1),
s = c(0.4, 0.8, 1.3)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.1)$fdata.est
plot(xx,col= res$groups)
# Generación de datos simulados con rprocKclust
set.seed(123)
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(40, 50, 30),
process = c("cos","cos_sin", "sin" ),
c = c(2, 1, -1),
s = c(0.4, 0.8, 1.3)) # Hacemos las curvas más suaves (reducción de s)
sim_data <- res$X
xx=optim.np(sim_data,h=0.1)$fdata.est
plot(xx,col= res$groups)
plot(xx,col= res$groups,main="fda.clust",cex=4)
plot(xx,col= res$groups,main="fda.clust",cex=14)
t
# Convertir los datos simulados en un dataframe adecuado para ggplot2
df <- data.frame(
t = rep(t, nrow(sim_data)),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
#plot(xx,col= res$groups,main="fda.clust",cex=14)
sim_data=xx$data
# Convertir los datos simulados en un dataframe adecuado para ggplot2
df <- data.frame(
t = rep(t, nrow()),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
# Convertir los datos simulados en un dataframe adecuado para ggplot2
df <- data.frame(
t = rep(t, nrow(sim_data)),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
# Crear la gráfica de fondo con ggplot2
p <- ggplot(df, aes(x = t, y = value, group = interaction(group, rep(1:nrow(sim_data), each = length(t))))) +
geom_line(aes(color = as.factor(group)), size = 0.6, alpha = 0.8) +
scale_color_manual(values = c("#E63946", "#F4A261", "#2A9D8F")) + # Colores distintivos
theme_void() + # Eliminar ejes, fondo, etc.
theme(legend.position = "none") # Eliminar la leyenda
# Crear el sticker
aa=sticker(
p,
package = "fda.clust",
p_size = 20, # Tamaño del texto principal
p_color = "white", # Color del texto
s_x = 1, s_y = 0.85, s_width = 1.3, s_height = 1.3, # Posición y tamaño de la gráfica de fondo
h_fill = "#264653", # Color de fondo de la pegatina
h_color = "#2A9D8F", # Color del borde de la pegatina
spotlight = TRUE, # Efecto de foco en el título
l_x = 1, l_y = 0.2, l_width = 3, l_height = 3, # Parámetros para el logotipo o texto inferior
url = "fda.usc", # Texto adicional en la parte inferior
u_size = 6, # Tamaño del texto URL
filename = "fda_clust_sticker.png" # Nombre del archivo de salida
)
p
as.factor(group)
nrow(sim_data)
plot(xx,col= res$groups,main="fda.clust",cex=14)
nrow(sim_data)
rep(t, nrow(sim_data))
group
df <- data.frame(
t = rep(t, nrow(sim_data)),
value = as.vector(t(sim_data)),
group = rep(group, each = length(t))
)
df
as.factor(group)
ggplot(df, aes(x = t, y = value,
group = interaction(group, rep(1:nrow(sim_data),
each = length(t))))) +
geom_line(aes(color = as.factor(group)), size = 0.6, alpha = 0.8) +
scale_color_manual(values = c("#E63946", "#F4A261", "#2A9D8F")) + # Colores distintivos
theme_void() + # Eliminar ejes, fondo, etc.
theme(legend.position = "none") # Eliminar la leyenda
as.factor(group)
# Crear la gráfica de fondo con ggplot2
p <- ggplot(df, aes(x = t, y = value,
group = interaction(group, rep(1:nrow(sim_data),
each = length(t))))) +
geom_line(aes(color =df$group), size = 0.6, alpha = 0.8) +
scale_color_manual(values = c("#E63946", "#F4A261", "#2A9D8F")) + # Colores distintivos
theme_void() + # Eliminar ejes, fondo, etc.
theme(legend.position = "none") # Eliminar la leyenda
p
library(fda.clust)
#' result <- mfhclust(res$X, method = "ward.D2")
#' # Plot the dendrogram
#' plot(result, main = "Dendrogram of Multivariate Functional Data (Ward's Method)")
#'
#' # Cut the dendrogram into  clusters
#' groups <- cutree(result, k = 3)
#' print(table(res$groups,groups))
#' }
#'
#' @export
mfhclust <- function(mfdata, method = "ward.D2") {
# Check if the input is an mfdata object (list of fdata objects)
if (!is.list(mfdata) || !all(sapply(mfdata, inherits, what = "fdata"))) {
stop("mfdata must be a list of fdata objects or an mfdata object.")
}
# Calculate distances using metric.mfdata
d <- metric.mfdata(mfdata, method = "euclidean")
# Perform hierarchical clustering using the distance matrix
hc <- hclust(as.dist(d), method = method)
return(hc)
}
t <- seq(0, 2 * pi, length.out = 101)
res <- rprocKclust(t, n = c(30, 50, 40), process = c("cos_sin", "sin", "cos"),
c = c(-1, 1, 1), k = c(NA, NA, NA), s = c(0.2, 0.3, 0.1))
# Perform hierarchical clustering using the default method (ward.D2)
result <- mfhclust(res$X, method = "ward.D2")
data(aemet, package = "fda.usc")
datos <- mfdata("temp"=aemet$temp,"logprec"=aemet$logprec)
result <- mfhclust(datos, method = "ward.D2")
plot(result, main = "Dendrogram of Multivariate Functional Data (Ward's Method)")
#'
groups <- cutree(result, k = 3)
print(table(res$groups,groups))
result
groups
plot(aemet$df[7:8],col=groups)
plot(datos,col=groups)
plot(aemet$df[7:8],col=groups,asp=T)
dat#' par(mfrow=c(1,3))
par(mfrow=c(1,3))
plot(datos$temp,col=groups)
groups <- cutree(result, k = 3)
par(mfrow=c(1,3))
plot(datos$temp,col=groups)
par(mfrow=c(1,3))
plot(aemet$temp,col=groups)
plot(aemet$logprec,col=groups)
plot(aemet$df[7:8],col=groups,asp=T)
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/mfkmeans.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
remove.packages("fda.clust")
devtools::install()
# library(fda.clust)
# exists("mfkmeans", where = asNamespace("fda.clust"))
#system.file(package = "fda.clust")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
