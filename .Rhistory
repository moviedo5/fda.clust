#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
rlang::last_trace()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
#' K-Means Clustering for Multivariate Functional Data
#'
#' This function performs k-means clustering on multivariate functional datasets using distances calculated with `metric.mfdata`.
#'
#' @param mfdata A list of `fdata` objects, or an `mfdata` object (a list of `fdata` objects) representing multiple functional datasets.
#' @param ncl Number of clusters.
#' @param max.iter Maximum number of iterations.
#' @param tol Tolerance for convergence.
#'
#' @return A list with the following components:
#' \describe{
#'   \item{\code{cluster}}{A vector of cluster assignments for each observation.}
#'   \item{\code{centers}}{A list of centroids for each cluster for each functional variable.}
#'   \item{\code{iter}}{Number of iterations until convergence.}
#' }
#'
#' @examples
#' data(aemet, package = "fda.usc")
#' datos <- mfdata("temp"=aemet$temp,"logprec"=aemet$logprec)
#' dd = metric.mfdata(datos)
#' result <- mfkmeans(datos, ncl = 3)
#' plot(datos,col=result$cluster)
#' plot(aemet$df[,7:8],col=result$cluster,asp=T)
#' @rdname mfkmeans
#' @aliases mfkmeans
#' @keywords cluster
#'
#' @export
mfkmeans <- function(mfdata, ncl = 2, max.iter = 100, tol = 1e-4) {
#  mfdata=datos
#  ncl = 2
#  max.iter = 100
#tol = 1e-4
n <- nrow(mfdata[[1]]$data) # Number of observations
n_vars <- length(mfdata)    # Number of functional variables
# Initialize cluster labels randomly
cluster_labels <- sample(1:ncl, n, replace = TRUE)
prev_cluster_labels <- rep(0, n)
iter <- 0
disNA <- matrix(NA, nrow = n, ncol = ncl)
# Main loop for k-means
while (!all(cluster_labels == prev_cluster_labels) && iter < max.iter) {
iter <- iter + 1
prev_cluster_labels <- cluster_labels
# 1. Calculate centroids for each cluster
centroids <- list()
for (k in 1:ncl) {
indices <- which(cluster_labels == k)
if (length(indices) > 0) {
# Calculate the centroid for each functional variable
centroids[[k]] <- lapply(mfdata, function(fdata) func.mean(fdata[indices, ]))
} else {
# If no points in cluster, randomly select a point as the centroid
random_index <- sample(1:n, 1)
centroids[[k]] <- lapply(mfdata, function(fdata) fdata[random_index, ])
}
}
# 2. Calculate distances from each observation to each cluster centroid
distances <- disNA
for (k in 1:ncl) {
temp_centroid_mfdata <- list()
for (i in seq_along(mfdata)) {
temp_centroid_mfdata[[i]] <- c(centroids[[k]][[i]],centroids[[k]][[i]])
}
names(temp_centroid_mfdata) <- names(mfdata)
distances[, k] <- metric.mfdata(mfdata,
temp_centroid_mfdata,method="euclidean")[,1]
}
# 3. Assign each observation to the closest cluster
cluster_labels <- max.col(-distances, ties.method = "random")
}
# Return results
list(
cluster = cluster_labels,
centers = centroids,
iter = iter
)
}
data(aemet, package = "fda.usc")
datos <- mfdata("temp"=aemet$temp,"logprec"=aemet$logprec)
dd = metric.mfdata(datos)
result <- mfkmeans(datos, ncl = 3)
plot(datos,col=result$cluster)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(fda.clust)
data("aemet", package = "fda.usc")
# Create the mfdata object with two functional datasets (temperature and log-precipitation)
mfdata <- mfdata(aemet$temp,  aemet$logprec)
names(mfdata ) <- c("temp", "logprec")
# Extract the individual functional datasets
temp <- aemet$temp
logprec <- aemet$logprec
# Apply mfKmeans to the combined multivariate functional data (temperature + log-precipitation)
set.seed(1234)
mfkmeans_result <- mfkmeans(mfdata, ncl = 3)
# Crear el objeto mfdata correctamente
# bug pq no coge bien los nombres en el mfdata
#names(mfda) <- c("temp","logprec")
silhouette_12 <- fclust.measures(mfdata, metric=metric.mfdata,
clusters =mfkmeans_result$cluster, index = "silhouette")
silhouette_1
silhouette_2
silhouette_12
# Plot the clustering result for the combined mfdata
plot(mfdata, col = mfkmeans_result$cluster)
# Apply mfKmeans to the combined multivariate functional data (temperature + log-precipitation)
set.seed(1234)
mfkmeans_result <- mfkmeans(mfdata, ncl = 3)
mfkmeans_result <- mfkmeans(mfdata, ncl = 3)
# Crear el objeto mfdata correctamente
# bug pq no coge bien los nombres en el mfdata
#names(mfda) <- c("temp","logprec")
silhouette_12 <- fclust.measures(mfdata, metric=metric.mfdata,
clusters =mfkmeans_result$cluster, index = "silhouette")
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/mfmeanshift.Rd")
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/mfkmeans.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(fda.clust)
# Load the AEMET data
data("aemet", package = "fda.usc")
# Create the mfdata object with two functional datasets (temperature and log-precipitation)
mfdata <- mfdata(aemet$temp,  aemet$logprec)
names(mfdata ) <- c("temp", "logprec")
# Extract the individual functional datasets
temp <- aemet$temp
logprec <- aemet$logprec
# Apply fKmeans to the temperature data (single functional variable)
set.seed(1234)
kmeans_temp <- fkmeans(temp, ncl = 3)
# Plot the clustering result for temperature
plot(temp, col = kmeans_temp$cluster, main = "fKmeans Clustering of Temperature Data")
silhouette_1 <- fclust.measures(temp,
clusters = kmeans_temp$cluster, index = "silhouette")
# Apply mfKmeans to the combined multivariate functional data (temperature + log-precipitation)
set.seed(1234)
mfkmeans_result <- mfkmeans(mfdata, ncl = 3)
silhouette_12 <- fclust.measures(mfdata, metric=metric.mfdata,
clusters =mfkmeans_result$cluster, index = "silhouette")
silhouette_1
silhouette_2
# Apply fKmeans to the log-precipitation data (single functional variable)
set.seed(1234)
kmeans_logprec <- fkmeans(logprec, ncl = 3)
# Plot the clustering result for log-precipitation
plot(logprec, col = kmeans_logprec$cluster, main = "fKmeans Clustering of Log-Precipitation Data")
silhouette_2 <- fclust.measures(logprec,
clusters = kmeans_logprec$cluster, index = "silhouette")
# Apply mfKmeans to the combined multivariate functional data (temperature + log-precipitation)
set.seed(1234)
mfkmeans_result <- mfkmeans(mfdata, ncl = 3)
silhouette_12 <- fclust.measures(mfdata, metric=metric.mfdata,
clusters =mfkmeans_result$cluster, index = "silhouette")
silhouette_1
silhouette_2
silhouette_12
# Plot the clustering result for the combined mfdata
plot(mfdata, col = mfkmeans_result$cluster)
table(  kmeans_temp$cluster ,kmeans_logprec$cluster)
table(  kmeans_temp$cluster)
table(  kmeans_logprec$cluster)
table( mfkmeans_result$cluster)
#  Comparison of Clustering Results
table(kmeans_temp$cluster, mfkmeans_result$cluster)
table(kmeans_temp$cluster, mfkmeans_result$cluster)
plot(datos,col=result$cluster)
plot(datos,col=mfkmeans_result$cluster)
par(mfrow=c(1,1))
plot(aemet$df[,7:8],col=mfkmeans_result$cluster,asp=T)
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/mfkmeans.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(roxygen2)
# setwd("C:/Users/Manuel Oviedo/github/fda.clust")
getwd()
#pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(tools)
tools::checkRd("man/fdbscan.Rd")
tools::checkRd("man/fmeanshift.Rd")
tools::checkRd("man/mfkmeans.Rd")
tools::checkRd("man/fhclust.Rd")
tools::checkRd("man/fkmeans.Rd")
#tools::checkRd("man/rproc2mu.Rd")
#tools::checkRd("man/rproc2clust.Rd")
tools::checkRd("man/fclust.measures.Rd")
tools::checkRd("man/ECG5000.Rd")
tools::checkRd("man/ECG200.Rd")
tools::checkRd("man/growth_ldata.Rd")
# 1. Inicializar la web del paquete
library(pkgdown)
#pkgdown::init_site()
# 2. Construir la web
pkgdown::build_site()
devtools::install()
devtools::install()
devtools::document()
devtools::build()
devtools::build_vignettes()
# Step 2: Build pkgdown site
pkgdown::build_site()
pkgdown::preview_site(path='404.html')
# Step 4: Check package
devtools::check()
# devtools::check(manual = TRUE)
build_manual(pkg = "fda.clust", path = NULL)
