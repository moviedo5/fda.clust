[{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleCandianWeather.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Example Canadian Weather","text":"first extract daily temperature precipitation data organize fdata objects. also prepare data frame containing metadata station, name, region, coordinates, basic descriptive statistics (mean, min, max) temperature precipitation.","code":"# Load the Canadian Weather data data(\"CanadianWeather\")  # Extract daily temperature and precipitation data and transpose them temp_data <- t(CanadianWeather$dailyAv[, , \"Temperature.C\"]) prec_data <- t(CanadianWeather$dailyAv[, , \"Precipitation.mm\"])  # Create fdata objects for temperature and precipitation n <- nrow(temp_data) p <- ncol(temp_data) argvals <- seq(1, 365, length.out = p) temp <- fdata(temp_data, argvals = argvals) prec <- fdata(prec_data, argvals = argvals)  # Calculate descriptive statistics for temperature and precipitation station_names <- names(CanadianWeather$region) coordinates <- CanadianWeather$coordinates corrected_longitude <- ifelse(coordinates[, 2] > 180, coordinates[, 2] - 360, coordinates[, 2])  mean_temp <- rowMeans(temp$data, na.rm = TRUE) min_temp <- apply(temp$data, 1, min, na.rm = TRUE) max_temp <- apply(temp$data, 1, max, na.rm = TRUE) mean_prec <- rowMeans(prec$data, na.rm = TRUE) min_prec <- apply(prec$data, 1, min, na.rm = TRUE) max_prec <- apply(prec$data, 1, max, na.rm = TRUE)  # Create a data frame with descriptive statistics df <- data.frame(   Station = station_names,   Region = CanadianWeather$region,   MeanTemp = mean_temp,   MinTemp = min_temp,   MaxTemp = max_temp,   MeanPrec = mean_prec,   MinPrec = min_prec,   MaxPrec = max_prec,   Latitude = coordinates[, 1],   Longitude = corrected_longitude )  # Create ldata object weather <- ldata(   df = df,   temp = temp,   prec = prec )"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleCandianWeather.html","id":"clustering-functional-data","dir":"Articles","previous_headings":"","what":"Clustering Functional Data","title":"Example Canadian Weather","text":"now cluster temperature data using algorithms fda.clust, including fKmeans, fDBSCAN, fHclust.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleCandianWeather.html","id":"fkmeans","dir":"Articles","previous_headings":"Clustering Functional Data","what":"fKmeans","title":"Example Canadian Weather","text":"cluster temperature data using fKmeans 3 clusters.fda.clust. Clustering temperature curves using fKmeans 3 clusters. Clustering temperature curves using fKmeans 3 clusters. Clustering temperature curves using fKmeans 3 clusters. Clustering temperature curves using fKmeans 3 clusters. Clustering temperature curves using fKmeans 3 clusters. Clustering temperature curves using fKmeans 3 clusters.","code":"# Apply fKmeans to cluster temperature curves set.seed(123)  kmeans_result <- fkmeans(temp, clusters = 3) plot(temp, col = kmeans_result$cluster, main = \"fKmeans Clustering of Temperature Data\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleCandianWeather.html","id":"fdbscan","dir":"Articles","previous_headings":"Clustering Functional Data","what":"fDBSCAN","title":"Example Canadian Weather","text":"use optimization function fda.clust select appropriate values eps minPts. Clustering temperature curves using fDBSCAN. Clustering temperature curves using fDBSCAN.","code":"# Optimize parameters for fDBSCAN set.seed(123) optimal_params <- optim.fdbscan(temp)$optimal # Apply fDBSCAN with optimal parameters dbscan_result <- fdbscan(temp,                   eps = optimal_params$eps,                   minPts = optimal_params$minPts)  plot(temp, col = dbscan_result$cluster, main = \"fDBSCAN Clustering of Temperature Data\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleCandianWeather.html","id":"fhclust","dir":"Articles","previous_headings":"Clustering Functional Data","what":"fHclust","title":"Example Canadian Weather","text":"use hierarchical clustering Ward’s method. Hierarchical clustering dendrogram weather data.","code":"# Apply hierarchical clustering to temperature data dist_matrix <- metric.lp(temp$data) hclust_result <- fhclust(dist_matrix, method = \"ward.D2\") plot(hclust_result, labels = df$Station, main = \"Hierarchical Clustering Dendrogram\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleCandianWeather.html","id":"visualizing-weather-stations-on-the-map","dir":"Articles","previous_headings":"","what":"Visualizing Weather Stations on the Map","title":"Example Canadian Weather","text":"","code":"library(maps) plot(NA, xlim = c(-150, -50), ylim = c(40, 90), type = \"n\", xlab = \"Longitude\", ylab = \"Latitude\", main = \"Weather Stations in Canada\") map(\"world\", regions = \"Canada\", fill = TRUE, col = \"lightblue\", add = TRUE) points(df$Longitude, df$Latitude, pch = 21, bg = \"red\", col = \"black\", cex = 1.2) text(df$Longitude, df$Latitude, labels = df$Station, pos = 4, cex = 0.7)"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleSpanishWeather.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Example Spanish Weather","text":"extract temperature precipitation data AEMET dataset available fda.usc package. dataset already ldata format, directly work .","code":"# Load the AEMET data data(\"aemet\")  # Extract the temperature (temp) and precipitation (prec) data weather <- aemet  # Already an ldata object  # Extract the multivariate part of ldata df <- weather$df  # Extract the fdata components temp <- weather$temp prec <- weather$prec"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleSpanishWeather.html","id":"fkmeans","dir":"Articles","previous_headings":"Data Preparation","what":"fKmeans","title":"Example Spanish Weather","text":"cluster temperature data using fKmeans 3 clusters.fda.clust. Clustering temperature curves using fKmeans. Clustering temperature curves using fKmeans. Clustering temperature curves using fKmeans. Clustering temperature curves using fKmeans. Clustering temperature curves using fKmeans. Clustering temperature curves using fKmeans.","code":"# Apply fKmeans to cluster temperature curves set.seed(1234)  kmeans_result <- fkmeans(temp, ncl = 3, dfunc = func.med.mode) table(kmeans_result$cluster) ##  ##  1  2  3  ##  7 25 41 # Plot the clustering result plot(temp, col = kmeans_result$cluster, main = \"fKmeans Clustering of Temperature Data\") # Evaluate clustering using fclust.measures silhouette_score <- fclust.measures(temp,                  clusters = kmeans_result$cluster,                 index = \"silhouette\") cat(\"Silhouette Score for fKmeans:\", silhouette_score, \"\\n\") ## Silhouette Score for fKmeans: 0.4436292"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleSpanishWeather.html","id":"fdbscan","dir":"Articles","previous_headings":"","what":"fDBSCAN","title":"Example Spanish Weather","text":"use optimization function fda.clust select appropriate values eps minPts. Clustering temperature curves using fDBSCAN.","code":"# Optimize parameters for fDBSCAN set.seed(123) optimal_params <- optim.fdbscan(temp,                     eps=2^(-4:5),                     minPts=seq(5,55,by=5))$optimal set.seed(123) # Apply fDBSCAN with optimal parameters dbscan_result <- fdbscan(temp, eps = optimal_params$eps, minPts = optimal_params$minPts)  # Plot the clustering result plot(temp, col = dbscan_result$cluster + 1, main = \"fDBSCAN Clustering of Temperature Data\") # Evaluate clustering using fclust.measures db_index <- fclust.measures( temp, index = \"db\",                               clusters=dbscan_result$cluster) cat(\"Davies-Bouldin Index for fDBSCAN:\", db_index, \"\\n\") ## Davies-Bouldin Index for fDBSCAN: 5.882806"},{"path":"https://moviedo5.github.io/fda.clust/articles/ExampleSpanishWeather.html","id":"fhclust","dir":"Articles","previous_headings":"","what":"fHclust","title":"Example Spanish Weather","text":"use hierarchical clustering Ward’s method. Hierarchical clustering dendrogram weather data.","code":"# Calculate the distance matrix using metric.lp rownames(temp$data)<-substr(rownames(temp$data),1,10) dist_matrix <- metric.lp(temp)  # Apply hierarchical clustering to temperature data hclust_result <- fhclust(dist_matrix, method = \"ward.D2\")  # Plot the dendrogram plot(hclust_result, labels = df$Station, main = \"Hierarchical Clustering Dendrogram\") # Evaluate clustering using fclust.measures dunn_index <- fclust.measures(temp, index = \"dunn\",  clusters = cutree(hclust_result, k = 3)) cat(\"Dunn Index for fHclust:\", dunn_index, \"\\n\") ## Dunn Index for fHclust: 0.0868173"},{"path":"https://moviedo5.github.io/fda.clust/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"fda.clust: Clustering Functional Data","text":"fda.clust package provides specialized clustering methods functional data. Inspired functional data analysis framework, offers tools : Clustering functional data using functional k-means, DBSCAN, mean-shift, hierarchical clustering. Validating quality resulting clusters using internal clustering measures. Access real-world datasets like ECG200, ECG5000, growth_ldata.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/Introduction.html","id":"clustering-methods","dir":"Articles","previous_headings":"Introduction","what":"Clustering Methods","title":"fda.clust: Clustering Functional Data","text":"following clustering methods provided: fkmeans: Functional k-means clustering. fdbscan: Functional DBSCAN clustering. fmeanshift: Functional mean-shift clustering. fhclust: Hierarchical clustering functional data.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/Introduction.html","id":"datasets","dir":"Articles","previous_headings":"Introduction","what":"Datasets","title":"fda.clust: Clustering Functional Data","text":"Three datasets included demonstrate use clustering methods: ECG200: Contains electrical signals heartbeats, categorized two groups: normal myocardial infarction. ECG5000: larger dataset heartbeats 5,000 samples, representing heartbeats categorized four groups. growth_ldata: Longitudinal growth data Berkeley Growth Study, height measurements boys girls. information datasets available respective documentation.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/MultivariateSpanishWeather.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"Example Multivariate Functional Data","text":"extract temperature precipitation data AEMET dataset available fda.usc package. create mfdata object using temperature (temp) log-transformed precipitation (logprec).","code":"# Load the AEMET data data(\"aemet\", package = \"fda.usc\")  # Create the mfdata object with two functional datasets (temperature and log-precipitation) mfdata <- mfdata(aemet$temp,  aemet$logprec) names(mfdata ) <- c(\"temp\", \"logprec\")  # Extract the individual functional datasets temp <- aemet$temp logprec <- aemet$logprec"},{"path":"https://moviedo5.github.io/fda.clust/articles/MultivariateSpanishWeather.html","id":"clustering-functional-data-using-fkmeans-temperature-only","dir":"Articles","previous_headings":"","what":"Clustering Functional Data Using fKmeans (Temperature Only)","title":"Example Multivariate Functional Data","text":"first cluster temperature data (temp) using fKmeans 3 clusters. visualize resulting clusters analyze cluster assignments. Clustering temperature using kmeans. Clustering temperature using kmeans. Clustering temperature using kmeans. Clustering temperature using kmeans. Clustering temperature using kmeans. Clustering temperature using kmeans.","code":"# Apply fKmeans to the temperature data (single functional variable) set.seed(1234) kmeans_temp <- fkmeans(temp, ncl = 3) # Plot the clustering result for temperature plot(temp, col = kmeans_temp$cluster, main = \"fKmeans Clustering of Temperature Data\") silhouette_1 <- fclust.measures(temp,      clusters = kmeans_temp$cluster, index = \"silhouette\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/MultivariateSpanishWeather.html","id":"clustering-functional-data-using-fkmeans-log-precipitation-only","dir":"Articles","previous_headings":"","what":"Clustering Functional Data Using fKmeans (Log-Precipitation Only)","title":"Example Multivariate Functional Data","text":"now cluster log-transformed precipitation data (logprec) using fKmeans 3 clusters. visualize resulting clusters analyze cluster assignments. Clustering log precipitation using kmeans. Clustering log precipitation using kmeans. Clustering log precipitation using kmeans. Clustering log precipitation using kmeans. Clustering log precipitation using kmeans. Clustering log precipitation using kmeans.","code":"# Apply fKmeans to the log-precipitation data (single functional variable) set.seed(1234) kmeans_logprec <- fkmeans(logprec, ncl = 3) # Plot the clustering result for log-precipitation plot(logprec, col = kmeans_logprec$cluster, main = \"fKmeans Clustering of Log-Precipitation Data\") silhouette_2 <- fclust.measures(logprec,        clusters = kmeans_logprec$cluster, index = \"silhouette\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/MultivariateSpanishWeather.html","id":"clustering-multivariate-functional-data-using-mfkmeans","dir":"Articles","previous_headings":"","what":"Clustering Multivariate Functional Data Using mfKmeans","title":"Example Multivariate Functional Data","text":"now cluster combined multivariate functional data (temp logprec) using mfKmeans 3 clusters. visualize resulting clusters analyze cluster assignments. Clustering temperature log precipitation using kmeans.","code":"# Apply mfKmeans to the combined multivariate functional data (temperature + log-precipitation) set.seed(1234) mfkmeans_result <- mfkmeans(mfdata, ncl = 3)  silhouette_12 <- fclust.measures(mfdata, metric=metric.mfdata,            clusters =mfkmeans_result$cluster, index = \"silhouette\")  silhouette_1 ## [1] 0.4436292 silhouette_2 ## [1] 0.3262084 silhouette_12 ## [1] 0.3242168 # Plot the clustering result for the combined mfdata plot(mfdata, col = mfkmeans_result$cluster) # table(  kmeans_temp$cluster ,kmeans_logprec$cluster) # table(  kmeans_temp$cluster) # table(  kmeans_logprec$cluster) #  # table( mfkmeans_result$cluster) # #  Comparison of Clustering Results  # table(kmeans_temp$cluster, mfkmeans_result$cluster) # table(kmeans_temp$cluster, mfkmeans_result$cluster) # plot(datos,col=result$cluster) # plot(datos,col=mfkmeans_result$cluster) # par(mfrow=c(1,1)) # plot(aemet$df[,7:8],col=mfkmeans_result$cluster,asp=T)"},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating Functional Data with fda.clust","text":"fda.clust package provides powerful tools clustering functional data. test benchmark performance clustering methods, essential generate synthetic functional data known properties. vignette introduces main functions simulating functional data using fda.clust, namely rprocKclust() rprocKmu(). functions allow users generate functional data predefined number clusters, controlled smoothness, variability.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"simulating-functional-data","dir":"Articles","previous_headings":"","what":"Simulating Functional Data","title":"Simulating Functional Data with fda.clust","text":"fda.clust package offers following key functions data generation: rprocKclust(): Simulates functional data known number clusters. rprocKmu(): Simulates mean functions multiple clusters. function provides set parameters allow control type, smoothness, structure generated data.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"generating-data-with-rprockclust","dir":"Articles","previous_headings":"Simulating Functional Data","what":"Generating Data with rprocKclust()","title":"Simulating Functional Data with fda.clust","text":"rprocKclust() function generates functional data K clusters. Users can control number observations per cluster, type generating process, variability curves.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"usage","dir":"Articles","previous_headings":"Simulating Functional Data > Generating Data with rprocKclust()","what":"Usage","title":"Simulating Functional Data with fda.clust","text":"Arguments: t: numeric vector defining time points functional data observed. n: vector specifying number curves cluster. process: vector defining process type cluster (e.g., “sin”, “cos”, etc.). c: numeric vector indicating shifts translations cluster. s: numeric vector controlling smoothness variability cluster.","code":"rprocKclust(t, n, process, c, s)"},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"example","dir":"Articles","previous_headings":"Simulating Functional Data > Generating Data with rprocKclust()","what":"Example","title":"Simulating Functional Data with fda.clust","text":"Functional data plot illustrates curves generated rprocKclust(), three distinct clusters, different shapes, shifts, variability.","code":"library(fda.clust)  set.seed(123) t <- seq(0, 2 * pi, length.out = 101) res <- rprocKclust(t, n = c(30, 50, 40),                    process = c(\"cos_sin\", \"sin\", \"cos\"),                    c = c(-1, 1, 1),                    s = c(0.2, 0.3, 0.1)) sim_data <- res$X group <- res$groups  plot(sim_data, col = rainbow(3)[group], main = \"Simulated Data from rprocKclust\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"generating-mean-functions-with-rprockmu","dir":"Articles","previous_headings":"Simulating Functional Data","what":"Generating Mean Functions with rprocKmu()","title":"Simulating Functional Data with fda.clust","text":"rprocKmu() function generates mean functions K clusters. useful controlling general shape structure curves within cluster.","code":""},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"usage-1","dir":"Articles","previous_headings":"Simulating Functional Data > Generating Mean Functions with rprocKmu()","what":"Usage","title":"Simulating Functional Data with fda.clust","text":"Arguments: - t: numeric vector defining time points mean functions evaluated. - process: vector defining process type cluster (e.g., “sin”, “cos”, etc.). - c: numeric vector indicating shifts translations cluster.","code":"rprocKmu(t, process, c)"},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"example-1","dir":"Articles","previous_headings":"Simulating Functional Data > Generating Mean Functions with rprocKmu()","what":"Example","title":"Simulating Functional Data with fda.clust","text":"Functional centroids plot shows mean functions three clusters. mean functions later used rprocKclust() function generate actual functional data.","code":"set.seed(123) t <- seq(0, 2 * pi, length.out = 101) mean_functions <- rprocKmu(t, process = c(\"cos_sin\", \"sin\", \"cos\"), c = c(-1, 1, 1))  plot(mean_functions, main = \"Mean Functions from rprocKmu\")"},{"path":"https://moviedo5.github.io/fda.clust/articles/Simulations.html","id":"customizing-simulations","dir":"Articles","previous_headings":"","what":"Customizing Simulations","title":"Simulating Functional Data with fda.clust","text":"rprocKclust() rprocKmu() functions allow users customize following aspects: Number Clusters: number clusters can controlled via n argument rprocKclust(). Types Functions: shape curves (e.g., sinusoidal, cosine, etc.) defined process argument. Smoothness: parameter s controls smoothness variability generated curves.","code":""},{"path":"https://moviedo5.github.io/fda.clust/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Manuel Febrero-Bande. Author. Manuel Oviedo-de la Fuente. Author, maintainer.","code":""},{"path":"https://moviedo5.github.io/fda.clust/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Febrero-Bande M, Oviedo-de la Fuente M (2024). fda.clust: Clustering Methods Functional Data Analysis. R package version 0.1.1, https://CRAN.R-project.org/package=fda.clust.","code":"@Manual{,   title = {fda.clust: Clustering Methods for Functional Data Analysis},   author = {Manuel Febrero-Bande and Manuel {Oviedo-de la Fuente}},   year = {2024},   note = {R package version 0.1.1},   url = {https://CRAN.R-project.org/package=fda.clust}, }"},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"fdaclust-clustering-methods-for-functional-data-analysis","dir":"","previous_headings":"","what":"Clustering Methods for Functional Data Analysis","title":"Clustering Methods for Functional Data Analysis","text":"fda.clust package provides specialized methods clustering functional data, inspired functional data analysis (FDA) framework. package offers tools clustering, validation, visualization functional data. allows users work real simulated datasets performance evaluation clustering methods.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Clustering Methods for Functional Data Analysis","text":"fkmeans: Functional k-means clustering. fdbscan: Functional DBSCAN clustering. fmeanshift: Functional mean-shift clustering. fhclust: Functional hierarchical clustering. Silhouette: Measure cohesion separation. Dunn: Ratio smallest inter-cluster distance largest intra-cluster distance. Davies-Bouldin: Average similarity clusters. Calinski-Harabasz: Ratio -cluster dispersion within-cluster dispersion. rprocKclust: Simulate functional data predefined number clusters. rprocKmu: Simulate mean functions multiple clusters. ECG200: 200 heartbeats classified normal myocardial infarction. ECG5000: 5000 heartbeats classified four groups. growth_ldata: Longitudinal growth data Berkeley Growth Study.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clustering Methods for Functional Data Analysis","text":"install development version GitHub, run following command R:","code":"# Install the development version from GitHub if (!requireNamespace(\"devtools\", quietly = TRUE)) install.packages(\"devtools\") devtools::install_github(\"moviedo5/fda.clust\")"},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Clustering Methods for Functional Data Analysis","text":"example demonstrating use fkmeans function clustering functional data.","code":"library(fda.clust)  # Load the example dataset ECG200 data(ECG200)  # Perform k-means clustering on functional data with 2 clusters set.seed(123) result <- fkmeans(ECG200$x, ncl = 2)  # Plot the functional data with cluster assignments plot(ECG200$x, col = result$cluster, main = \"ECG200 Clustered with fkmeans\")"},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"datasets","dir":"","previous_headings":"","what":"Datasets","title":"Clustering Methods for Functional Data Analysis","text":"package includes three functional datasets test clustering methods: ECG200: Electrical signals heartbeats (2 classes: normal myocardial infarction). ECG5000: larger dataset 5000 heartbeats (4 classes). growth_ldata: Longitudinal growth data Berkeley Growth Study, including heights boys girls 31 ages.","code":""},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"clustering-methods","dir":"","previous_headings":"Available Functions","what":"Clustering Methods","title":"Clustering Methods for Functional Data Analysis","text":"fkmeans: Perform functional k-means clustering. fdbscan: Perform functional DBSCAN clustering. fmeanshift: Perform functional mean-shift clustering. fhclust: Perform functional hierarchical clustering.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"cluster-validation-and-measures","dir":"","previous_headings":"Available Functions","what":"Cluster Validation and Measures","title":"Clustering Methods for Functional Data Analysis","text":"fclust.measures: Evaluate quality clusters using internal indices silhouette, Dunn, Davies-Bouldin, Calinski-Harabasz indices.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"data-simulation","dir":"","previous_headings":"Available Functions","what":"Data Simulation","title":"Clustering Methods for Functional Data Analysis","text":"rprocKclust: Generate functional data known clusters testing clustering methods. rprocKmu: Generate mean functions multiple clusters.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"utility-functions","dir":"","previous_headings":"Available Functions","what":"Utility Functions","title":"Clustering Methods for Functional Data Analysis","text":"kmeans.assig.groups: Assign functional data clusters based distances. kmeans.centers.update: Update cluster centers k-means clustering. kmeans.fd.dist: Calculate distances functional k-means clustering.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Clustering Methods for Functional Data Analysis","text":"learn fda.clust package, check vignettes comprehensive overview functionalities. can access vignettes directly R: Details specific functions reference manual. learn functions usage, can refer pkgdown documentation site. Vignettes: Pkg introduction Generation functional clusters. Example using Canadian Weather. Example using Spanish Weather. Example multivariate FDA usingh Spanish Weather.","code":"vignette(\"Introduction\", package = \"fda.clust\") vignette(\"Simulations\", package = \"fda.clust\")"},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"issues--feature-requests","dir":"","previous_headings":"","what":"Issues & Feature Requests","title":"Clustering Methods for Functional Data Analysis","text":"reporting issues, bugs, feature requests, etc., please use Github Issues page. Contributions feedback always welcome.","code":""},{"path":"https://moviedo5.github.io/fda.clust/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Clustering Methods for Functional Data Analysis","text":"Febrero-Bande, M. Oviedo de la Fuente, M. (2012). Statistical Computing Functional Data Analysis: R Package fda.usc. Journal Statistical Software, 51(4):1-28, DOI.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG200.html","id":null,"dir":"Reference","previous_headings":"","what":"ECG 200 Dataset — ECG200","title":"ECG 200 Dataset — ECG200","text":"series traces electrical activity recorded one heartbeat. two classes normal heartbeat Myocardial Infarction.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG200.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ECG 200 Dataset — ECG200","text":"","code":"data(ECG200)"},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG200.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ECG 200 Dataset — ECG200","text":"list containing following components: df data.frame following variables: class Corresponding class level “CinCECGtorso” curves 2 classes. sample Factor variable. TSC database, first 100 values (sample=\"train\") used training sample, remaining 100 (sample=\"test\") testing.  x fdata class object n = 200 curves (one curve per row) 96 discretization points (one per column).","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG200.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ECG 200 Dataset — ECG200","text":"http://timeseriesclassification.com/description.php?Dataset=CinCECGtorso","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG200.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ECG 200 Dataset — ECG200","text":"dataset formatted R. Olszewski part thesis \"Generalized feature extraction structural pattern recognition time-series data\" Carnegie Mellon University, 2001.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG5000.html","id":null,"dir":"Reference","previous_headings":"","what":"ECG 5000 Dataset — ECG5000","title":"ECG 5000 Dataset — ECG5000","text":"data pre-processed two steps: (1) Extract heartbeat. (2) Make heartbeat equal length using interpolation. dataset originally used paper \"general framework never-ending learning time series streams\", DAMI 29(6). , 5,000 heartbeats randomly selected. patient severe congestive heart failure class values obtained automated annotation.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG5000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ECG 5000 Dataset — ECG5000","text":"","code":"data(ECG5000)"},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG5000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ECG 5000 Dataset — ECG5000","text":"list containing following components: df data.frame following variables: class Corresponding class level “ECG” curves 4 classes. sample Factor variable. TSC database, first 500 values (sample=\"train\") used training sample remaining 4500 (sample=\"test\") testing.  x fdata class object n = 5000 curves (per row) 140 discretization points (per column).","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG5000.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ECG 5000 Dataset — ECG5000","text":"https://physionet.org/cgi-bin/atm/ATM http://timeseriesclassification.com/description.php?Dataset=ECG5000","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/ECG5000.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ECG 5000 Dataset — ECG5000","text":"original dataset \"ECG5000\" 20-hour long ECG downloaded Physionet. name BIDMC Congestive Heart Failure Database (chfdb) record \"chf07\". originally published \"Goldberger AL, Amaral LAN, Glass L, Hausdorff JM, Ivanov PCh, Mark RG, Mietus JE, Moody GB, Peng C-K, Stanley . PhysioBank, PhysioToolkit, PhysioNet: Components New Research Resource Complex Physiologic Signals. Circulation 101(23)\".","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fclust.measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional Data Clustering Measures — fclust.measures","title":"Functional Data Clustering Measures — fclust.measures","text":"function computes clustering evaluation measures functional data objects class 'fdata'. supports calculation Dunn, Davies-Bouldin, Calinski-Harabasz, Silhouette indices. Distances computed using metric.lp function fda.usc package default, users can specify different distance metric via 'metric' parameter. Cluster means calculated using appropriate function, can specified user via 'center_func' argument.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fclust.measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional Data Clustering Measures — fclust.measures","text":"","code":"fclust.measures(   X,   clusters,   index = \"silhouette\",   metric = metric.lp,   par.metric = list(),   center_func = func.mean )"},{"path":"https://moviedo5.github.io/fda.clust/reference/fclust.measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional Data Clustering Measures — fclust.measures","text":"X fdata object containing functional data. rows represent observations columns represent discrete evaluations functional data. clusters vector containing cluster assignments observation fdata object. index character string indicating measure compute. Possible options \"silhouette\" (default), \"dunn\", \"db\" (Davies-Bouldin), \"ch\" (Calinski-Harabasz). metric function specifying distance metric used. default 'metric.lp'. par.metric list parameters passed 'metric' function. center_func function compute cluster means, possible options like 'func.mean', 'func.trim.mode', user-defined functions.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fclust.measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional Data Clustering Measures — fclust.measures","text":"value selected clustering measure.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fclust.measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional Data Clustering Measures — fclust.measures","text":"","code":"set.seed(123) t <- seq(0, 2 * pi, length.out = 101) res <- rprocKclust(t, n = c(30, 50, 40),                     process = c(\"cos_sin\", \"sin\", \"cos\"),                     c = c(-1, 1, 1), k = c(NA, NA, NA),                     s = c(0.2, 0.3, 0.1)) X <- res$X clusters <- res$groups silhouette_val <- fclust.measures(X, clusters, index = \"silhouette\") dunn_val <- fclust.measures(X, clusters, index = \"dunn\") db_val <- fclust.measures(X, clusters, index = \"db\") ch_val <- fclust.measures(X, clusters, index = \"ch\") print(silhouette_val) #> [1] 0.407778 print(dunn_val) #> [1] 0.8951075 print(db_val) #> [1] 1.507773 print(ch_val) #> [1] 118.2537"},{"path":"https://moviedo5.github.io/fda.clust/reference/fdbscan.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional DBSCAN Optimization and Clustering — fdbscan","title":"Functional DBSCAN Optimization and Clustering — fdbscan","text":"Perform DBSCAN clustering functional data optimize parameters `eps` `minPts`.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fdbscan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional DBSCAN Optimization and Clustering — fdbscan","text":"","code":"fdbscan(   fdataobj,   eps,   minPts = 5,   metric = metric.lp,   par.metric = list(lp = 2) )"},{"path":"https://moviedo5.github.io/fda.clust/reference/fdbscan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional DBSCAN Optimization and Clustering — fdbscan","text":"fdataobj object class `fdata` containing functional data. eps Neighborhood parameter (`eps`) DBSCAN. NULL, estimated automatically. minPts Minimum cluster size (`minPts`). NULL, estimated automatically. metric Metric function compute distances. Default `metric.lp`. par.metric List arguments metric function.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fdbscan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional DBSCAN Optimization and Clustering — fdbscan","text":"list following elements: `optimal`: Data frame best parameters (`eps`, `minPts`, `quality`). `model`: DBSCAN clustering model refined clusters. `results`: Data frame combinations `eps` `minPts` tested.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fdbscan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional DBSCAN Optimization and Clustering — fdbscan","text":"","code":"if (FALSE) { # \\dontrun{ t <- seq(0, 2 * pi, length.out = 101) res <- rprocKclust(t, n = c(30, 50, 40), process = c(\"cos_sin\", \"sin\", \"cos\"),                    c = c(-1, 1, 1), k = c(NA, NA, NA), s = c(0.2, 0.3, 0.1)) opt_results <- optim.fdbscan(res$X, metric = metric.lp, par.metric = list(lp = 2)) print(opt_results$optimal) plot(res$X, col = opt_results$model$cluster+1, main = \"Optimal DBSCAN Clustering\") } # }"},{"path":"https://moviedo5.github.io/fda.clust/reference/fhclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Clustering for Functional Data — fhclust","title":"Hierarchical Clustering for Functional Data — fhclust","text":"Performs hierarchical clustering functional data using specified clustering method. distance functional observations calculated using distance measures fda.usc package.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fhclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Clustering for Functional Data — fhclust","text":"","code":"fhclust(fdataobj, method = \"ward.D2\")"},{"path":"https://moviedo5.github.io/fda.clust/reference/fhclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Clustering for Functional Data — fhclust","text":"fdataobj object class fdata representing functional data clustered. row corresponds functional observation. method character string specifying agglomeration method used. Possible values \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\". Defaults \"ward.D2\".","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fhclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Clustering for Functional Data — fhclust","text":"object class hclust, describes tree produced hierarchical clustering process. object following components: merge numeric matrix describing merge history. height height mergers occurred. order vector giving order objects. labels labels objects clustered. call call produced result. method agglomeration method used.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fhclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical Clustering for Functional Data — fhclust","text":"fhclust function applies hierarchical clustering functional data, using distances calculated via fda.usc::metric.lp function. method hierarchical clustering can agglomeration methods available hclust. function useful clustering functional data time series, curves, functional representations. function returns object class hclust, can plotted interpreted dendrogram.","code":""},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/reference/fhclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Clustering for Functional Data — fhclust","text":"","code":"if (FALSE) { # \\dontrun{ t <- seq(0, 2 * pi, length.out = 101) res <- rprocKclust(t, n = c(30, 50, 40), process = c(\"cos_sin\", \"sin\", \"cos\"),                    c = c(-1, 1, 1), k = c(NA, NA, NA), s = c(0.2, 0.3, 0.1)) # Perform hierarchical clustering using the default method (ward.D2) result <- fhclust(res$X, method = \"ward.D2\") # Plot the dendrogram plot(result, main = \"Dendrogram of Functional Data (Ward's Method)\")  # Cut the dendrogram into  clusters groups <- cutree(result, k = 3) print(table(res$groups,groups)) } # }"},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Means Clustering for functional data — fkmeans","title":"K-Means Clustering for functional data — fkmeans","text":"Perform k-means clustering functional data.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Means Clustering for functional data — fkmeans","text":"","code":"fkmeans(   fdataobj,   ncl = 2,   metric = metric.lp,   dfunc = func.trim.FM,   max.iter = 100,   par.metric = NULL,   par.dfunc = list(trim = 0.05),   method = \"sample\",   cluster.size = 5,   draw = TRUE,   ... )"},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Means Clustering for functional data — fkmeans","text":"fdataobj fdata class object. ncl See details section. metric Metric function, default metric.lp. dfunc Type depth measure, default FM depth. max.iter Maximum number iterations detection centers. par.metric List arguments pass metric function. par.dfunc List arguments pass dfunc function . method Method selecting initial centers. method=\"Sample\" (default) takes n times random selection ncl centers. ncl curves greater distance initial centers. method=\"Exact\" calculated combinations (< 1e+6) ncl centers. ncl curves greater distance initial centers (method may slow). cluster.size Minimum cluster size (default 5). cluster fewer curves, eliminated process continued less cluster. draw =TRUE, draw curves color centers. ... arguments passed methods.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Means Clustering for functional data — fkmeans","text":"Return: cluster: Indexes groups assigned. centers: Curves centers.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-Means Clustering for functional data — fkmeans","text":"method searches locations around grouped data (predetermined number groups). ncl=NULL, randomizes initial centers, ncl=2 using kmeans.center.ini function. ncl integer, indicating number groups classify, selected ncl initial centers using kmeans.center.ini function. ncl vector integers, indicating position initial centers length(ncl) equal number groups. ncl fdata class objecct, ncl initial centers curves nrow(ncl) number groups.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"K-Means Clustering for functional data — fkmeans","text":"Hartigan, J. . Wong, M. . (1979). K-means clustering algorithm. Applied Statistics 28, 100 \\-108.","code":""},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-Means Clustering for functional data — fkmeans","text":"Manuel Febrero-Bande, Manuel Oviedo de la Fuente manuel.oviedo@udc.es","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fkmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Means Clustering for functional data — fkmeans","text":"","code":"if (FALSE) { # \\dontrun{ library(fda.usc) data(phoneme) ind <- c(1:50,101:150,201:250) clas <- as.numeric(phoneme$classlearn[ind]) fdataobj <- phoneme$learn[ind,] # Unsupervised classification out.fd1 <- fkmeans(fdataobj,ncl=3,draw=TRUE) out.fd2 <- fkmeans(fdataobj,ncl=3,draw=TRUE,method=\"exact\") # Different Depth function ind2 <- c(17,77,126) out.fd3 <- fkmeans(fdataobj,ncl=fdataobj[ind2,],draw=FALSE,                      dfunc =func.trim.FM,par.dfunc=list(trim=0.1)) out.fd4 <- fkmeans(fdataobj, ncl=fdataobj[ind2,],                       draw=FALSE, dfunc = func.med.FM) table(clas,out.fd1$cluster ) table(clas,out.fd4$cluster ) } # }"},{"path":"https://moviedo5.github.io/fda.clust/reference/fmeanshift.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional Mean Shift Clustering — fmeanshift","title":"Functional Mean Shift Clustering — fmeanshift","text":"function applies mean shift clustering algorithm functional data object class fdata.  uses kernel-based approach iteratively shift points towards high-density regions.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fmeanshift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional Mean Shift Clustering — fmeanshift","text":"","code":"fmeanshift(   fdataobj,   h = -0.15,   metric = metric.lp,   par.metric = list(lp = 2),   derr = 0.1 )"},{"path":"https://moviedo5.github.io/fda.clust/reference/fmeanshift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional Mean Shift Clustering — fmeanshift","text":"fdataobj object class fdata containing functional data clustered. h bandwidth parameter. h < 0, bandwidth estimated using h.default function prob = abs(h). Defaults h = -0.15. metric function compute distance elements fdataobj. Defaults metric.lp. par.metric list additional parameters passed metric function. default, list(lp = 2) compute L2 distance. derr convergence tolerance parameter used determine mean shift converged. Defaults derr = 0.1.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fmeanshift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional Mean Shift Clustering — fmeanshift","text":"list following components: cluster integer vector indicating cluster assignment observation fdataobj. centers fdata object representing centers clusters.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/fmeanshift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functional Mean Shift Clustering — fmeanshift","text":"fmeanshift algorithm iteratively shifts observation towards mode neighborhood, defined using kernel bandwidth h. procedure continues shift distance smaller convergence threshold controlled derr. distance functional data computed using distance function metric, defaults L2 distance provided metric.lp fda.usc package. bandwidth h controls size neighborhood c onsidered shift.","code":""},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/reference/fmeanshift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional Mean Shift Clustering — fmeanshift","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(8:1) t <- seq(0, 2 * pi, length.out = 101) res <- rprocKclust(t, n = c(40, 40), process = c(\"cos_sin\", \"sin\"),                    c = c(-1, 2), k = c(NA, NA), s = c(0.3, 0.3)) # Run mean shift clustering with automatic bandwidth selection result <- fmeanshift(res$X) # Display cluster assignments and centers table(result$cluster,res$groups) plot(result$centers) plot(res$X, col = result$cluster, main = \"functional meanshift\") } # }"},{"path":"https://moviedo5.github.io/fda.clust/reference/growth_ldata.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth Data for Berkeley Growth Study — growth_ldata","title":"Growth Data for Berkeley Growth Study — growth_ldata","text":"growth_ldata dataset contains longitudinal growth data Berkeley Growth Study. data tracks growth 39 boys 54 girls, measuring height 31 different ages.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/growth_ldata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth Data for Berkeley Growth Study — growth_ldata","text":"","code":"data(growth_ldata)"},{"path":"https://moviedo5.github.io/fda.clust/reference/growth_ldata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Growth Data for Berkeley Growth Study — growth_ldata","text":"list containing following components: df data.frame following variables: group factor variable 2 levels indicating group (boys girls) Berkeley Growth Study.  x fdata class object n = 93 curves (one curve per row) 31 discretization points (one per column).   includes 73 curves corresponding heights 39 boys 54 girls measured centimeters 31 different ages.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/growth_ldata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Growth Data for Berkeley Growth Study — growth_ldata","text":"https://example-dataset-source.org","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/growth_ldata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growth Data for Berkeley Growth Study — growth_ldata","text":"growth data includes information boys girls, following structure:","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfhclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","title":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","text":"Performs hierarchical clustering multivariate functional data using specified clustering method. distance multivariate functional observations calculated using metric.mfdata function.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfhclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","text":"","code":"mfhclust(mfdata, method = \"ward.D2\")"},{"path":"https://moviedo5.github.io/fda.clust/reference/mfhclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","text":"mfdata list `fdata` objects, `mfdata` object (list `fdata` objects) representing multiple functional datasets. method character string specifying agglomeration method used. Possible values \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\". Defaults \"ward.D2\".","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfhclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","text":"object class hclust, describes tree produced hierarchical clustering process. object following components: merge numeric matrix describing merge history. height height mergers occurred. order vector giving order objects. labels labels objects clustered. call call produced result. method agglomeration method used.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfhclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","text":"mfhclust function applies hierarchical clustering multivariate functional data, using distances calculated via metric.mfdata function. method hierarchical clustering can agglomeration methods available hclust. function useful clustering multivariate functional data time series, curves, functional representations. function returns object class hclust, can plotted interpreted dendrogram.","code":""},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/reference/mfhclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Clustering for Multivariate Functional Data — mfhclust","text":"","code":"if (FALSE) { # \\dontrun{ data(aemet, package = \"fda.usc\") datos <- mfdata(\"temp\"=aemet$temp,\"logprec\"=aemet$logprec) # dd = metric.mfdata(datos) # Perform hierarchical clustering using the default method (ward.D2) result <- mfhclust(datos, method = \"ward.D2\") # Plot the dendrogram plot(result, main = \"Dendrogram of Multivariate Functional Data (Ward's Method)\")  # Cut the dendrogram into  clusters groups <- cutree(result, k = 3) par(mfrow=c(1,3)) plot(aemet$temp,col=groups) plot(aemet$logprec,col=groups) plot(aemet$df[7:8],col=groups,asp=T) } # }"},{"path":"https://moviedo5.github.io/fda.clust/reference/mfkmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"K-Means Clustering for Multivariate Functional Data — mfkmeans","title":"K-Means Clustering for Multivariate Functional Data — mfkmeans","text":"function performs k-means clustering multivariate functional datasets using distances calculated `metric.mfdata`.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfkmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-Means Clustering for Multivariate Functional Data — mfkmeans","text":"","code":"mfkmeans(mfdata, ncl = 2, max.iter = 100, tol = 1e-04)"},{"path":"https://moviedo5.github.io/fda.clust/reference/mfkmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-Means Clustering for Multivariate Functional Data — mfkmeans","text":"mfdata list `fdata` objects, `mfdata` object (list `fdata` objects) representing multiple functional datasets. ncl Number clusters. max.iter Maximum number iterations. tol Tolerance convergence.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfkmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-Means Clustering for Multivariate Functional Data — mfkmeans","text":"list following components: cluster vector cluster assignments observation. centers list centroids cluster functional variable. iter Number iterations convergence.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/mfkmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-Means Clustering for Multivariate Functional Data — mfkmeans","text":"","code":"data(aemet, package = \"fda.usc\") datos <- mfdata(\"temp\"=aemet$temp,\"logprec\"=aemet$logprec) dd = metric.mfdata(datos) result <- mfkmeans(datos, ncl = 3) plot(datos,col=result$cluster)  # plot(aemet$df[,7:8],col=result$cluster,asp=T)"},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Functional Data for K Clusters — rprocKclust","title":"Simulate Functional Data for K Clusters — rprocKclust","text":"Simulates functional data K clusters based specified parameters clustering analysis within `fda.clust` package. uses `rprocKmu` generate latent processes `rproc2fdata` `fda.usc` generate functional data.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Functional Data for K Clusters — rprocKclust","text":"","code":"rprocKclust(t, n, process, c, k = NULL, s = 1, par.list = NULL, ...)"},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Functional Data for K Clusters — rprocKclust","text":"t numeric vector representing evaluation points (argvals) functional data computed. n vector integers specifying number curves generated K clusters. process character vector length K specifying type latent process. Options include \"poly1\", \"poly2\", \"sin\", \"cos\", \"sin_cos\", \"cos_sin\". c numeric vector length K specifying coefficients process. k optional numeric vector length K specifying exponents processes. parameter relevant \"poly1\" \"poly2\". s numeric vector specifying standard deviation noise added cluster's data. one value provided, recycled clusters. par.list list lists additional parameters passed rproc2fdata generating functional data cluster. ... Additional arguments passed rproc2fdata, allowing customization process generation.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Functional Data for K Clusters — rprocKclust","text":"list containing following elements: X: functional data fdata object. X.hat: estimated mean functions cluster. groups: group labels curve. color: colors associated cluster. colors: colors assigned individual curve.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Functional Data for K Clusters — rprocKclust","text":"","code":"t <- seq(0, 2*pi, length.out = 101) res <- rprocKclust(t,                     n = c(30, 50, 40),                     process = c(\"poly1\", \"sin\", \"cos\"),                     c = c(10, 1, 1),                     k = c(2, NA, NA),                     s = c(0.2, 0.3, 0.1))  plot(res$X, col = res$colors) lines(res$X.hat, lwd = 2, col = res$color)"},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKmu.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Latent Processes for Functional Data — rprocKmu","title":"Generate Latent Processes for Functional Data — rprocKmu","text":"Generates multiple latent processes (mu.1, mu.2, ..., mu.k) based specified input parameters, including process type, coefficients, exponents, number evaluation points.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKmu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Latent Processes for Functional Data — rprocKmu","text":"","code":"rprocKmu(t, process, c, k = NULL)"},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKmu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Latent Processes for Functional Data — rprocKmu","text":"t numeric vector specifying grid points (argvals) latent processes evaluated. process character vector specifying types latent processes. Available options include \"poly1\", \"poly2\", \"sin\", \"cos\", \"sin_cos\", \"cos_sin\". c numeric vector coefficients used scale latent processes. k optional numeric vector exponents used latent processes. exponents control shape curvature processes, applicable \"poly1\" \"poly2\" process types.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKmu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Latent Processes for Functional Data — rprocKmu","text":"list containing following elements: mu: list fdata objects, representing one   latent processes.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKmu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Latent Processes for Functional Data — rprocKmu","text":"available latent process types described follows: \"poly1\": \\(\\mu_i(t) = c_i \\cdot (1 - t) \\cdot t^{k_i}\\),   c.scaling coefficient k.controls curvature. \"poly2\": \\(\\mu_i(t) = c_i \\cdot (1 - t)^{k_i} \\cdot t\\),   c.scaling coefficient k.controls curvature. \"sin\": \\(\\mu_i(t) = c_i \\cdot \\sin(t)\\),   c.scaling coefficient adjusts amplitude. \"cos\": \\(\\mu_i(t) = c_i \\cdot \\cos(t)\\),   c.scaling coefficient adjusts amplitude. \"sin_cos\": \\(\\mu_i(t) = c_i \\cdot (\\sin(t) - \\cos(t))\\),   c.scaling coefficient. \"cos_sin\": \\(\\mu_i(t) = c_i \\cdot (\\cos(t) - \\sin(t))\\),   c.scaling coefficient.","code":""},{"path":"https://moviedo5.github.io/fda.clust/reference/rprocKmu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Latent Processes for Functional Data — rprocKmu","text":"","code":"t <- seq(0, 1, length.out = 101) fproces <- rprocKmu(t, c(\"poly1\", \"poly2\", \"sin\", \"cos\"),                      c(10, -10, 1, 1), c(1, 1, NA, NA)) plot(fproces, main = \"Latent Processes\")"},{"path":[]},{"path":"https://moviedo5.github.io/fda.clust/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"fda.clust 0.1.2","text":"ECG200: Electrical signals heartbeats (2 classes: normal myocardial infarction). ECG5000: larger dataset 5000 heartbeats (4 classes). growth_ldata: Longitudinal growth data Berkeley Growth Study.","code":""},{"path":"https://moviedo5.github.io/fda.clust/news/index.html","id":"changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"fda.clust 0.1.2","text":"rproc2mu rproc2clust Clustering functions: fkmeans, fdbscan, fmeanshift, fhclust Cluster validation: fclust.measures Simulation: rprocKclust, rprocKmu Internal utility functions: kmeans.assig.groups, kmeans.centers.update, kmeans.fd.dist","code":""},{"path":"https://moviedo5.github.io/fda.clust/news/index.html","id":"improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"fda.clust 0.1.2","text":"Vignettes Introduction Simulations. New datasets: ECG200, ECG5000, growth_ldata.","code":""}]
